// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 티어 
enum Tier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  DIAMOND
}

model Accounts {
  accountId       Int      @id @default(autoincrement()) @map("accountId")
  userId          String   @unique @map("userId") // 아이디
  password        String   @map("password") // 비밀번호
  name            String   @map("name") // 이름
  age             Int      @map("age") // 나이

  createdAt       DateTime @default(now()) @map("createdAt")
  updatedAt       DateTime @updatedAt() @map("updatedAt")

  // Accounts : Teams => 1 : 1
  Team Teams?
  // Accounts : Rankings => 1 : 1
  ranking Rankings?
  // Accounts : CashDatasets => 1 : N
  cashDatasets CashDatasets[]
  // Accounts : PlayRecords => 1 : N
  playRecords PlayRecords[]

  @@map("Accounts")
}

model Teams {
  teamId        Int      @id @default(autoincrement()) @map("teamId")
  userId        String   @unique @map("userId") // Accounts 테이블 참조 FK
  playerId      Int      @map("playerId") // Players 테이블 참조 FK
  teamPower     Int      @map("teamPower") // 팀 능력치 합산

  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt() @map("updatedAt")

  // Accounts 테이블과 관계 설정
  account Accounts @relation(fields: [userId], references: [userId], onDelete: Cascade)
  // Players 테이블과 관계 설정
  player Players @relation(fields: [playerId], references: [playerId], onDelete: Cascade)

  @@map("Teams")
}

model Rankings {
  rankingId       Int     @id @default(autoincrement()) @map("rankingId")
  accountId       Int     @unique @map("accountId") // Accounts 테이블 참조 FK
  winningRate     Float   @map("winningRate") // 승률
  record          Int     @map("record") // 점수
  tier            Tier    @map("tier") // 티어
  playRecords     Json    @map("playRecords") // 경기 결과

  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt() @map("updatedAt")

  // Accounts 테이블과 관계 설정
  account Accounts @relation(fields: [accountId], references: [accountId])

  @@map("Rankings")
}

model CashDatasets {
  cashDatasetId Int      @id @default(autoincrement()) @map("cashDatasetId")
  userId        String   @map("userId") // Accounts 테이블 참조 FK
  amount        Int      @map("amount") // 거래 금액
  type          String   @map("type") // 거래 유형
  description   String   @map("description") // 거래 설명

  createdAt     DateTime @default(now()) @map("createdAt")

  // Accounts 테이블과 관계 설정
  account Accounts @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("CashDatasets")
}

model Players {
  playerId        Int      @id @default(autoincrement()) @map("playerId")
  name            String   @unique @map("name") // 선수 이름
  speed           Int      @map("speed") // 속력
  shootingFinish  Int      @map("shootingFinish") // 골 결정력
  shootingPower   Int      @map("shootingPower") // 슛 파워
  stamina         Int      @map("stamina") // 스태미너
  defense         Int      @map("defense") // 수비력

  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt() @map("updatedAt")

  // Players : Teams => 1 : N
  team Teams[]

  @@map("Players")
}

model PlayRecords {
  playRecordsId   Int      @id @default(autoincrement()) @map("playRecordsId")
  accountId       Int      @map("accountId") // Accounts 테이블 참조 FK
  playerResult    String   @map("playerResult") // Rankings 테이블에 넣어줄 경기 결과
  startTime       DateTime @default(now()) @map("startTime") // 시작시간
  endTime         DateTime @map("endTime") // 끝 시간은 코드에서 설정. 시작시간의 +1분 정도?

  // Accounts 테이블과 관계 설정
  account Accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  @@map("PlayRecords")
}
