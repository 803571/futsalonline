// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 계정 테이블
model Accounts {
  accountId       Int      @id @default(autoincrement())
  userId          String   @unique// 아이디
  password        String // 비밀번호
  name            String? 이름
  age             Int? 나이

  createdAt       DateTime @default(now()) @map("createdAt")
  updatedAt       DateTime @updatedAt() @map("updatedAt")

  // Accounts : Rosters => 1 : N
  rosters Rosters[]
  // Accounts : Squads => 1 : N
  squad Squads[]
  // Accounts : CashDatasets => 1 : N
  cashDatasets CashDatasets[]
  // Accounts : GameRankings => 1 : 1
  gameRanking GameRankings?

  @@map("accounts")
}

// 선수 카드 테이블
model Players {
  playerId    Int      @id @default(autoincrement())
  name        String   @unique // 선수 이름 : 유일
  height      Int      // 키
  weight      Int      // 몸무게

  PAC         Int      // 속력
  SHO         Int      // 슛
  PAS         Int      // 패스
  DRI         Int      // 드리블
  DEF         Int      // 수비
  PHY         Int      // 피지컬

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  // Players : Rosters => 1 : N
  rosters Rosters[]
  // Players : Squads => 1 : N
  squard Squads[]

  @@map("players")
}

// 보유 선수 목록 테이블 - 인벤토리 역할
model Rosters {
  rosterId      Int      @id @default(autoincrement())
  accountId     Int      // Accounts 테이블 참조 FK
  playerId      Int      // Players 테이블 참조 FK
  level         Int      @default(1) // 강화 레벨

  // Accounts 테이블과 관계 설정
  account Accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  // Items 테이블과 관계 설정
  player Players @relation(fields: [playerId], references: [playerId], onDelete: Cascade)

  @@map("rosters")
}

// 스쿼드 테이블 - 로스터 테이블과 관계를 맺을 수 있지만 게임 구조에서 불필요하여 계정, 선수에 관계
model Squads {
  squadId      Int      @id @default(autoincrement())
  accountId    Int      // Accounts 테이블 참조 FK
  playerId     Int      // Players 테이블 참조 FK
  position     String   // 포지션

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()

  // Accounts 테이블과 관계 설정
  account Accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
  // Players 테이블과 관계 설정
  player Players @relation(fields: [playerId], references: [playerId], onDelete: Cascade)

  @@map("squads")
}

// 캐시 관련 테이블
model CashDatasets {
  cashDatasetId Int      @id @default(autoincrement())
  accountId     Int      // Accounts 테이블 참조 FK
  amount        Int      // 거래 금액
  type          String   // 거래 유형
  description   String   // 거래 설명

  createdAt     DateTime @default(now())

  // Accounts 테이블과 관계 설정
  account Accounts @relation(fields: [accountId], references: [accountId], onDelete: Cascade)

  @@map("cashDatasets")
}

// 랭킹 관련 테이블
model GameRankings {
  rankingId       Int     @id @default(autoincrement())
  accountId       Int     @unique // Accounts 테이블 참조 FK
  winningRate     Int     @default(0) // 승률
  rankScore       Int     @default(1000) // 랭킹 점수
  playRecords     Json?   // 경기 결과(경기 상대, 승무패, 시작 시간, 끝 시간(시작시간+1))

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  // Accounts 테이블과 관계 설정
  account Accounts @relation(fields: [accountId], references: [accountId])

  @@map("gameRankings")
}